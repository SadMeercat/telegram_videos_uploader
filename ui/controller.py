"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ - —Å–≤—è–∑—ã–≤–∞–µ—Ç UI —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
"""
import os
import time
from typing import Optional
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QListWidgetItem
from PyQt5.QtCore import QTimer

from ui.main_window import MainWindow
from core.auth import TelegramAuth, TelegramAuthChecker
from core.chat_loader import ChatLoader
from core.uploader import VideoUploader


class MainWindowController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    
    def __init__(self, window: MainWindow):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        
        Args:
            window: –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        """
        self.window = window
        self._connect_signals()
        self._auto_check_auth()
        
    def _connect_signals(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∫ —Å–ª–æ—Ç–∞–º"""
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫–Ω–æ–ø–æ–∫ –∫ –º–µ—Ç–æ–¥–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        self.window.check_auth_button.clicked.connect(self.check_authorization)
        self.window.get_code_button.clicked.connect(self.request_code)
        self.window.confirm_code_button.clicked.connect(self.confirm_code)
        self.window.reset_auth_button.clicked.connect(self.reset_authorization)
        self.window.browse_button.clicked.connect(self.browse_folder)
        self.window.prefix_input.textChanged.connect(self.on_prefix_changed)
        self.window.load_chats_button.clicked.connect(self.load_chats)
        self.window.chat_search_input.textChanged.connect(self.filter_chats)
        self.window.chat_list_widget.itemClicked.connect(self.on_chat_selected)
        self.window.start_button.clicked.connect(self.start_upload)
        self.window.stop_button.clicked.connect(self.stop_upload)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
        self.window.code_input.returnPressed.connect(self.confirm_code)
    
    def _auto_check_auth(self) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if all([self.window.api_id_input.text(), 
                self.window.api_hash_input.text(), 
                self.window.phone_input.text()]):
            self.check_authorization()
    
    # –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    def check_authorization(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self._validate_api_settings():
            return
            
        self.window.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        self.window.check_auth_button.setEnabled(False)
        self.window.check_auth_button.setText("–ü—Ä–æ–≤–µ—Ä—è–µ–º...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.window.auth_thread and self.window.auth_thread.isRunning():
            self.window.auth_thread.terminate()
            self.window.auth_thread.wait()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.window.auth_thread = TelegramAuthChecker(
            int(self.window.api_id_input.text()),
            self.window.api_hash_input.text(),
            self.window.phone_input.text()
        )
        self.window.auth_thread.step_completed.connect(self._on_auth_step)
        self.window.auth_thread.error_occurred.connect(self._on_auth_error)
        self.window.auth_thread.finished.connect(self._on_auth_thread_finished)
        self.window.auth_thread.start()
    
    def request_code(self) -> None:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self._validate_api_settings():
            return
            
        self.window.log_message("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        self.window.get_code_button.setEnabled(False)
        self.window.get_code_button.setText("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.window.auth_thread and self.window.auth_thread.isRunning():
            self.window.auth_thread.terminate()
            self.window.auth_thread.wait()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.window.auth_thread = TelegramAuth(
            int(self.window.api_id_input.text()),
            self.window.api_hash_input.text(),
            self.window.phone_input.text()
        )
        self.window.auth_thread.step_completed.connect(self._on_auth_step)
        self.window.auth_thread.error_occurred.connect(self._on_auth_error)
        self.window.auth_thread.finished.connect(self._on_auth_thread_finished)
        self.window.auth_thread.start()
    
    def confirm_code(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.window.code_input.text():
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return
            
        if not self.window.auth_thread or not self.window.auth_thread.isRunning():
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", "–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.window.log_message("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        self.window.confirm_code_button.setEnabled(False)
        self.window.confirm_code_button.setText("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å 2FA –µ—Å–ª–∏ –µ—Å—Ç—å
        password_2fa = self.window.password_input.text().strip() if self.window.password_input.text() else None
        if password_2fa:
            self.window.auth_thread.set_password(password_2fa)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –ø–æ—Ç–æ–∫
        self.window.auth_thread.set_code(self.window.code_input.text())
    
    def reset_authorization(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        if self.window.auth_thread and self.window.auth_thread.isRunning():
            self.window.auth_thread.terminate()
            self.window.auth_thread.wait()
        
        if self.window.upload_thread and self.window.upload_thread.isRunning():
            self.window.upload_thread.stop_upload()
            self.window.upload_thread.wait()
        
        if self.window.chat_loader_thread and self.window.chat_loader_thread.isRunning():
            self.window.chat_loader_thread.terminate()
            self.window.chat_loader_thread.wait()
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
        session_file = "uploader_session.session"
        max_attempts = 5
        for attempt in range(max_attempts):
            try:
                if os.path.exists(session_file):
                    os.remove(session_file)
                    print(f"[RESET] –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    break
                else:
                    print(f"[RESET] –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    break
            except PermissionError:
                print(f"[RESET] –§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}")
                if attempt < max_attempts - 1:
                    time.sleep(1)
                else:
                    QMessageBox.warning(self.window, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                      "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
            except Exception as e:
                print(f"[RESET] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")
                break
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        self.window.phone_code_hash = None
        self._update_auth_ui("not_authorized")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        self.window.chat_list_widget.clear()
        self.window.selected_chat_label.setText("–ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.window.chat_load_status.setText("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")
        
        self.window.log_message("üîÑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
        QMessageBox.information(self.window, "–°–±—Ä–æ—Å", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!")
    
    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ø–∞–ø–∫–∞–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏
    def browse_folder(self) -> None:
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –≤–∏–¥–µ–æ"""
        folder = QFileDialog.getExistingDirectory(self.window, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ")
        if folder:
            self.window.folder_input.setText(folder)
            self.window.save_settings()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
            self._check_upload_readiness()
    
    def on_prefix_changed(self) -> None:
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏"""
        self.window.save_settings()
    
    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏
    def load_chats(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        if not self._validate_api_settings():
            return
            
        self.window.log_message("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
        self.window.load_chats_button.setEnabled(False)
        self.window.load_chats_button.setText("–ó–∞–≥—Ä—É–∂–∞–µ–º...")
        
        if self.window.chat_loader_thread and self.window.chat_loader_thread.isRunning():
            self.window.chat_loader_thread.terminate()
            self.window.chat_loader_thread.wait()
        
        self.window.chat_loader_thread = ChatLoader(
            int(self.window.api_id_input.text()),
            self.window.api_hash_input.text()
        )
        self.window.chat_loader_thread.chats_loaded.connect(self._on_chats_loaded)
        self.window.chat_loader_thread.error_occurred.connect(self._on_chat_load_error)
        self.window.chat_loader_thread.progress_updated.connect(self._on_chat_load_progress)
        self.window.chat_loader_thread.finished.connect(self._on_chat_load_finished)
        self.window.chat_loader_thread.start()
    
    def filter_chats(self) -> None:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É"""
        search_text = self.window.chat_search_input.text().lower()
        self._update_chat_list(search_text)
    
    def on_chat_selected(self, item: QListWidgetItem) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
        if not item:
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
        chat_data = item.data(32)  # UserRole
        if chat_data:
            chat_id = chat_data['id']
            chat_title = chat_data['title']
            chat_type = chat_data['type']
            
            self.window.selected_chat_id = chat_id
            self.window.selected_chat_name = chat_title  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            self.window.chat_input.setText(str(chat_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            self.window.selected_chat_label.setText(f"üí¨ {chat_title}\nüè∑Ô∏è {chat_type}\nüÜî ID: {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
            self._check_upload_readiness()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.window.save_settings()
            
            self.window.log_message(f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_title}")
    
    # –ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏
    def start_upload(self) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self._validate_upload_settings():
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        chat_id = self.window.selected_chat_id
        video_folder = self.window.folder_input.text()
        prefix_text = self.window.prefix_input.text().strip()
        
        try:
            delay_seconds = int(self.window.delay_input.text())
        except ValueError:
            delay_seconds = 2
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        speed_index = self.window.speed_combo.currentIndex()
        max_concurrent = [1, 4, 8][speed_index]
        
        self.window.log_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.window.start_button.setEnabled(False)
        self.window.stop_button.setEnabled(True)
        self.window.progress_bar.setVisible(True)
        self.window.file_progress_bar.setVisible(True)
        self.window.progress_bar.setValue(0)
        self.window.file_progress_bar.setValue(0)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        self.window.upload_thread = VideoUploader(
            int(self.window.api_id_input.text()),
            self.window.api_hash_input.text(),
            chat_id,
            video_folder,
            delay_seconds,
            max_concurrent,
            prefix_text
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.window.upload_thread.progress_updated.connect(self.window.progress_bar.setValue)
        self.window.upload_thread.status_updated.connect(self.window.log_message)
        self.window.upload_thread.file_uploaded.connect(self._on_file_uploaded)
        self.window.upload_thread.file_progress.connect(self._on_file_progress)
        self.window.upload_thread.finished.connect(self._on_upload_finished)
        
        self.window.upload_thread.start()
    
    def stop_upload(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ"""
        if self.window.upload_thread and self.window.upload_thread.isRunning():
            self.window.log_message("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
            self.window.stop_button.setEnabled(False)
            self.window.stop_button.setText("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
            self.window.upload_thread.stop_upload()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if not self.window.upload_thread.wait(5000):  # 5 —Å–µ–∫—É–Ω–¥
                self.window.log_message("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                self.window.upload_thread.terminate()
                self.window.upload_thread.wait()
            
            self._reset_ui_after_stop()
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _validate_api_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
        valid, error_msg = self.window.settings.validate_api_settings(
            self.window.api_id_input.text(),
            self.window.api_hash_input.text(),
            self.window.phone_input.text()
        )
        
        if not valid:
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", error_msg)
            return False
            
        return True
    
    def _validate_upload_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if not hasattr(self.window, 'selected_chat_id') or not self.window.selected_chat_id:
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return False
            
        if not self.window.folder_input.text():
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ")
            return False
            
        if not os.path.exists(self.window.folder_input.text()):
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ —Å –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        return True
    
    def _update_auth_ui(self, state: str, user_info: str = "") -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if state == "not_authorized":
            self.window.auth_status_label.setText("üìã –°—Ç–∞—Ç—É—Å: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            self.window.get_code_button.setEnabled(True)
            self.window.code_input.setEnabled(False)
            self.window.confirm_code_button.setEnabled(False)
            self.window.load_chats_button.setEnabled(False)
            self.window.chat_load_status.setText("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")
            
        elif state == "code_sent":
            self.window.auth_status_label.setText("üìã –°—Ç–∞—Ç—É—Å: –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            self.window.code_input.setEnabled(True)
            self.window.confirm_code_button.setEnabled(True)
            self.window.code_input.setFocus()
            
        elif state == "authorized":
            self.window.auth_status_label.setText(f"üìã –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {user_info}")
            self.window.get_code_button.setEnabled(False)
            self.window.code_input.setEnabled(False)
            self.window.confirm_code_button.setEnabled(False)
            self.window.load_chats_button.setEnabled(True)
            self.window.chat_load_status.setText("–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤'")
        
        self._reset_auth_buttons()
    
    def _reset_auth_buttons(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.window.check_auth_button.setEnabled(True)
        self.window.check_auth_button.setText("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
        
        if self.window.get_code_button.isEnabled():
            self.window.get_code_button.setText("üì± –ö–æ–¥")
        
        if self.window.confirm_code_button.isEnabled():
            self.window.confirm_code_button.setText("‚úÖ OK")
    
    def _check_upload_readiness(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ"""
        has_chat = hasattr(self.window, 'selected_chat_id') and bool(self.window.selected_chat_id)
        has_folder = bool(self.window.folder_input.text())
        folder_exists = has_folder and os.path.exists(self.window.folder_input.text())
        
        can_upload = has_chat and has_folder and folder_exists
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ can_upload —ç—Ç–æ bool
        can_upload = bool(can_upload)
        
        self.window.start_button.setEnabled(can_upload)
    
    def _update_chat_list(self, search_text: str = "") -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        self.window.chat_list_widget.clear()
        
        for chat in self.window.chats_list:
            if search_text and search_text not in chat['title'].lower():
                continue
                
            item = QListWidgetItem(f"{chat['title']}\n{chat['type']}")
            item.setData(32, chat)  # UserRole
            self.window.chat_list_widget.addItem(item)
    
    def _reset_ui_after_stop(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç UI –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.window.start_button.setEnabled(True)
        self.window.stop_button.setEnabled(False)
        self.window.stop_button.setText("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.window.progress_bar.setVisible(False)
        self.window.file_progress_bar.setVisible(False)
        self.window.current_file_label.setText("üìÑ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.window.upload_speed_label.setText("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: -")
    
    # –°–ª–æ—Ç—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    def _on_auth_step(self, step: str, status: str, data: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print(f"[UI] Auth step: {step}, status: {status}, data: {data}")
        
        if step == "code_sent":
            self._update_auth_ui("code_sent")
            self.window.log_message("üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω")
            
        elif step == "auth_success":
            self._update_auth_ui("authorized", data)
            self.window.log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {data}")
            self.window.save_settings()
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self._auto_load_chats()
            
        elif step == "need_password":
            self.window.log_message("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA")
            QMessageBox.information(self.window, "2FA", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø–æ–ª–µ '2FA' –∏ –Ω–∞–∂–º–∏—Ç–µ 'OK'")
            
        elif step == "already_authorized":
            self._update_auth_ui("authorized", data)
            self.window.log_message(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {data}")
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –µ—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
            self._auto_load_chats()
            
        elif step == "not_authorized":
            self._update_auth_ui("not_authorized")
    
    def _on_auth_error(self, error: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        error_msg = str(error)
        
        if "PHONE_CODE_EXPIRED" in error_msg:
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", 
                              "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.\n–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.")
            self.window.code_input.clear()
            self.window.code_input.setEnabled(False)
            self.window.confirm_code_button.setEnabled(False)
        elif "PHONE_CODE_INVALID" in error_msg:
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", 
                              "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.window.code_input.clear()
            self.window.code_input.setFocus()
        elif "FLOOD_WAIT" in error_msg:
            import re
            wait_time = re.search(r'(\d+)', error_msg)
            if wait_time:
                wait_seconds = int(wait_time.group(1))
                wait_minutes = wait_seconds // 60
                QMessageBox.warning(self.window, "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", 
                                  f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {wait_minutes} –º–∏–Ω—É—Ç {wait_seconds % 60} —Å–µ–∫—É–Ω–¥.")
            else:
                QMessageBox.warning(self.window, "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", 
                                  "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        else:
            QMessageBox.critical(self.window, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", error_msg)
        
        self._reset_auth_buttons()
    
    def _on_auth_thread_finished(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("[UI] Auth thread finished")
        if self.window.auth_thread:
            self.window.auth_thread.deleteLater()
            self.window.auth_thread = None
    
    def _on_chats_loaded(self, chats: list) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤"""
        self.window.chats_list = chats
        self._update_chat_list()
        self.window.log_message(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
    
    def _on_chat_load_error(self, error: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤"""
        QMessageBox.critical(self.window, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:\n{error}")
        self.window.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {error}")
    
    def _on_chat_load_progress(self, status: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤"""
        self.window.chat_load_status.setText(status)
    
    def _on_chat_load_finished(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤"""
        self.window.load_chats_button.setEnabled(True)
        self.window.load_chats_button.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        self.window.chat_load_status.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.window.chats_list)} —á–∞—Ç–æ–≤")
        
        if self.window.chat_loader_thread:
            self.window.chat_loader_thread.deleteLater()
            self.window.chat_loader_thread = None
    
    def _on_file_uploaded(self, filename: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
        self.window.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {filename}")
    
    def _on_file_progress(self, filename: str, percentage: int, speed: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
        self.window.current_file_label.setText(f"üìÑ {filename}")
        self.window.file_progress_bar.setValue(percentage)
        self.window.upload_speed_label.setText(f"‚ö° {speed}")
    
    def _on_upload_finished(self, success: bool, message: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        self._reset_ui_after_stop()
        
        if success:
            self.window.log_message(f"‚úÖ {message}")
            QMessageBox.information(self.window, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", message)
        else:
            self.window.log_message(f"‚ùå {message}")
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", message)
        
        if self.window.upload_thread:
            self.window.upload_thread.deleteLater()
            self.window.upload_thread = None
    
    def _auto_load_chats(self) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Ç—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã
        self.load_chats()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        saved_chat_id = self.window.settings.get("selected_chat_id")
        saved_chat_name = self.window.settings.get("selected_chat_name", "")
        
        if saved_chat_id:
            self.window.selected_chat_id = saved_chat_id
            self.window.chat_input.setText(str(saved_chat_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            if saved_chat_name:
                self.window.selected_chat_label.setText(f"üí¨ {saved_chat_name}\nüÜî ID: {saved_chat_id}")
            else:
                self.window.selected_chat_label.setText(f"üí¨ –í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç\nüÜî ID: {saved_chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ
            self._check_upload_readiness()
            
            self.window.log_message(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç: ID {saved_chat_id}")