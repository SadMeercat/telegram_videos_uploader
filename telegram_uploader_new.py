import sys
import os
import asyncio
import traceback
import time
import threading
import re
import json
import subprocess
import struct
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                             QWidget, QPushButton, QLabel, QLineEdit, QTextEdit, 
                             QFileDialog, QMessageBox, QProgressBar, QGroupBox,
                             QComboBox, QListWidget, QListWidgetItem, QSplitter)
from PyQt5.QtCore import QThread, pyqtSignal, Qt, QTimer
from PyQt5.QtGui import QFont
from pyrogram import Client
from pyrogram.errors import SessionPasswordNeeded, PhoneCodeInvalid
from datetime import datetime
import json


class Settings:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    def __init__(self, filename="settings.json"):
        self.filename = filename
        self.data = {}
        self.load()
    
    def load(self):
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.data = {}
    
    def save(self):
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def get(self, key, default=None):
        return self.data.get(key, default)
    
    def set(self, key, value):
        self.data[key] = value
        self.save()


class ChatLoader(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
    chats_loaded = pyqtSignal(list)  # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    error_occurred = pyqtSignal(str)
    progress_updated = pyqtSignal(str)  # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
    
    def __init__(self, api_id, api_hash):
        super().__init__()
        self.api_id = api_id
        self.api_hash = api_hash
    
    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        loop = asyncio.get_event_loop()
        try:
            loop.run_until_complete(self.load_chats())
        except Exception as e:
            self.error_occurred.emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {str(e)}")
        finally:
            loop.close()
    
    async def load_chats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        client = None
        try:
            self.progress_updated.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            
            client = Client(
                name="uploader_session",
                api_id=self.api_id,
                api_hash=self.api_hash,
                workdir=os.path.dirname(os.path.abspath(__file__))
            )
            
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            try:
                me = await client.get_me()
                self.progress_updated.emit(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
                my_id = me.id
            except Exception:
                self.error_occurred.emit("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return
            
            chats = []
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ (–ª–∏—á–Ω—ã–µ —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã)
            self.progress_updated.emit("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
            async for dialog in client.get_dialogs(limit=100):
                chat = dialog.chat
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
                if hasattr(chat, 'type') and chat.type.name == 'CHANNEL':
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–∞–Ω–∞–ª–∞–º–∏
                if hasattr(chat, 'type') and chat.type.name == 'SUPERGROUP':
                    if getattr(chat, 'is_broadcast', False):
                        continue  # –≠—Ç–æ –∫–∞–Ω–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
                if hasattr(chat, 'type') and chat.type.name == 'PRIVATE':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±–æ—Ç–æ–º
                    if getattr(chat, 'is_bot', False):
                        continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
                if hasattr(chat, 'type'):
                    if chat.type.name == 'PRIVATE':
                        # –õ–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ "–ò–∑–±—Ä–∞–Ω–Ω—ã–º–∏" (Saved Messages)
                        if chat.id == my_id:
                            chat_name = "üíæ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ"
                        else:
                            first_name = getattr(chat, 'first_name', '') or ''
                            last_name = getattr(chat, 'last_name', '') or ''
                            username = getattr(chat, 'username', '')
                            
                            name_parts = [first_name, last_name]
                            chat_name = " ".join(filter(None, name_parts))
                            
                            if username:
                                chat_name += f" (@{username})"
                            
                            if not chat_name.strip():
                                chat_name = f"User {chat.id}"
                            
                            chat_name = "üë§ " + chat_name
                    
                    elif chat.type.name == 'GROUP':
                        # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
                        chat_name = f"üë• {chat.title}"
                    
                    elif chat.type.name == 'SUPERGROUP':
                        # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —á—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª)
                        chat_name = f"üë• {chat.title}"
                    
                    else:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
                        continue
                else:
                    # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π pyrogram - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª
                    if hasattr(chat, 'title'):
                        chat_name = f"ÔøΩ {chat.title}"
                    elif hasattr(chat, 'first_name'):
                        chat_name = f"üë§ {chat.first_name}"
                    else:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö
                permissions_info = ""
                if hasattr(dialog.chat, 'permissions'):
                    perms = dialog.chat.permissions
                    if hasattr(perms, 'can_send_messages') and not perms.can_send_messages:
                        permissions_info = " [–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ]"
                
                chats.append({
                    'id': chat.id,
                    'name': chat_name + permissions_info,
                    'type': getattr(chat, 'type', 'unknown'),
                    'username': getattr(chat, 'username', ''),
                    'can_send': not permissions_info
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –ª–∏—á–Ω—ã–µ, –ø–æ—Ç–æ–º –≥—Ä—É–ø–ø—ã
            def sort_key(chat):
                name = chat['name']
                if name.startswith('üíæ'):  # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ
                    return (0, name)
                elif name.startswith('üë§'):  # –õ–∏—á–Ω—ã–µ
                    return (1, name)
                elif name.startswith('üë•'):  # –ì—Ä—É–ø–ø—ã
                    return (2, name)
                else:
                    return (3, name)
            
            chats.sort(key=sort_key)
            
            self.progress_updated.emit(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ (–±–µ–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏ –±–æ—Ç–æ–≤)")
            self.chats_loaded.emit(chats)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}")
            print(f"Traceback: {traceback.format_exc()}")
            self.error_occurred.emit(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            if client:
                await client.disconnect()


class TelegramAuth(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram"""
    step_completed = pyqtSignal(str, str, str)  # step, status, data
    error_occurred = pyqtSignal(str)
    code_requested = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    def __init__(self, api_id, api_hash, phone):
        super().__init__()
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.user_code = None
        self.user_password = None
        self.code_event = None  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        self.client = None
        self.phone_code_hash = None
        
    def set_code(self, code):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–¥ –∏ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
        self.user_code = code
        if self.code_event:
            self.code_event.set()
    
    def set_password(self, password):
        self.user_password = password
        
    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        loop = asyncio.get_event_loop()
        try:
            loop.run_until_complete(self.full_authorization_flow())
        except Exception as e:
            self.error_occurred.emit(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            loop.close()
    
    async def full_authorization_flow(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            print(f"[AUTH] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è {self.phone}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = Client(
                name="uploader_session",
                api_id=self.api_id,
                api_hash=self.api_hash,
                workdir=os.path.dirname(os.path.abspath(__file__))
            )
            
            await self.client.connect()
            print("[AUTH] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            result = await self.client.send_code(phone_number=self.phone)
            self.phone_code_hash = getattr(result, 'phone_code_hash', '')
            
            print(f"[AUTH] –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, phone_code_hash: {self.phone_code_hash}")
            self.step_completed.emit("code_sent", "success", self.phone_code_hash)
            
            # –ñ–¥–µ–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.wait_for_user_code()
            
            # –¢–µ–ø–µ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥ –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
            await self.confirm_code_in_same_session()
            
        except Exception as e:
            print(f"[AUTH] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            print(f"[AUTH] Traceback: {traceback.format_exc()}")
            self.error_occurred.emit(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        finally:
            if self.client:
                try:
                    await self.client.disconnect()
                except Exception as e:
                    print(f"[AUTH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")
    
    async def wait_for_user_code(self):
        """–ñ–¥–µ–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import threading
        
        self.code_event = threading.Event()
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–¥–µ—Ç –∫–æ–¥ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º 120 —Å–µ–∫—É–Ω–¥)
        loop = asyncio.get_event_loop()
        
        def wait_for_code():
            return self.code_event.wait(timeout=120)  # 2 –º–∏–Ω—É—Ç—ã
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        code_received = await loop.run_in_executor(None, wait_for_code)
        
        if not code_received:
            raise Exception("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ")
            
        print(f"[AUTH] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user_code}")
    
    async def confirm_code_in_same_session(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥ –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏"""
        try:
            print(f"[AUTH] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞: {self.user_code}")
            print(f"[AUTH] –ò—Å–ø–æ–ª—å–∑—É–µ–º phone_code_hash: {self.phone_code_hash}")
            
            signed_in = await self.client.sign_in(
                phone_number=self.phone,
                phone_code_hash=self.phone_code_hash,
                phone_code=self.user_code
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self.client.get_me()
            user_info = f"{me.first_name or ''} {me.last_name or ''}".strip()
            if me.username:
                user_info += f" (@{me.username})"
            
            print(f"[AUTH] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {user_info}")
            self.step_completed.emit("auth_success", "success", user_info)
            
        except SessionPasswordNeeded:
            print("[AUTH] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            if self.user_password:
                print("[AUTH] –ï—Å—Ç—å –ø–∞—Ä–æ–ª—å 2FA, –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
                try:
                    await self.client.check_password(self.user_password)
                    me = await self.client.get_me()
                    user_info = f"{me.first_name or ''} {me.last_name or ''}".strip()
                    if me.username:
                        user_info += f" (@{me.username})"
                    print(f"[AUTH] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞: {user_info}")
                    self.step_completed.emit("auth_success", "success", user_info)
                except Exception as pwd_error:
                    print(f"[AUTH] –û—à–∏–±–∫–∞ –ø–∞—Ä–æ–ª—è 2FA: {pwd_error}")
                    self.step_completed.emit("need_password", "error", f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA: {pwd_error}")
            else:
                print("[AUTH] –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω")
                self.step_completed.emit("need_password", "info", "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    async def check_authorization(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
        client = None
        try:
            client = Client(
                name="uploader_session",
                api_id=self.api_id,
                api_hash=self.api_hash,
                workdir=os.path.dirname(os.path.abspath(__file__))
            )
            
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            try:
                me = await client.get_me()
                user_info = f"{me.first_name or ''} {me.last_name or ''}".strip()
                if me.username:
                    user_info += f" (@{me.username})"
                self.step_completed.emit("already_authorized", "success", user_info)
            except:
                self.step_completed.emit("not_authorized", "info", "")
                
        except Exception as e:
            self.step_completed.emit("not_authorized", "info", "")
        finally:
            if client:
                await client.disconnect()


class TelegramAuthChecker(QThread):
    """–û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    step_completed = pyqtSignal(str, str, str)
    error_occurred = pyqtSignal(str)
    
    def __init__(self, api_id, api_hash, phone):
        super().__init__()
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
    
    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        loop = asyncio.get_event_loop()
        try:
            loop.run_until_complete(self.check_authorization())
        except Exception as e:
            self.error_occurred.emit(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            loop.close()
    
    async def check_authorization(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
        client = None
        try:
            client = Client(
                name="uploader_session",
                api_id=self.api_id,
                api_hash=self.api_hash,
                workdir=os.path.dirname(os.path.abspath(__file__))
            )
            
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            try:
                me = await client.get_me()
                user_info = f"{me.first_name or ''} {me.last_name or ''}".strip()
                if me.username:
                    user_info += f" (@{me.username})"
                self.step_completed.emit("already_authorized", "success", user_info)
            except:
                self.step_completed.emit("not_authorized", "info", "")
                
        except Exception as e:
            self.step_completed.emit("not_authorized", "info", "")
        finally:
            if client:
                await client.disconnect()


def get_video_metadata(video_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ) —Å –ø–æ–º–æ—â—å—é moviepy"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º moviepy –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        try:
            from moviepy import VideoFileClip
            print("[VIDEO_META] –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é moviepy...")
            
            clip = VideoFileClip(video_path)
            duration = clip.duration
            width, height = clip.size
            clip.close()  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            
            print(f"[VIDEO_META] moviepy —É—Å–ø–µ—à–Ω–æ: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={duration}—Å ({duration//60:.0f}:{duration%60:02.0f}), —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ={width}x{height}")
            return {
                'duration': int(duration) if duration and duration > 0 else None,
                'width': width if width and width > 0 else None,
                'height': height if height and height > 0 else None
            }
        except ImportError as ie:
            print(f"[VIDEO_META] moviepy –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {ie}")
        except Exception as e:
            print(f"[VIDEO_META] moviepy –æ—à–∏–±–∫–∞: {e}")
        
        # Fallback: –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        print("[VIDEO_META] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞...")
        file_size = os.path.getsize(video_path)
        file_ext = os.path.splitext(video_path)[1].lower()
        
        # –†–∞–∑–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –±–∏—Ç—Ä–µ–π—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if file_ext in ['.mp4', '.mkv', '.mov']:
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–¥–µ–∫–∏, –æ–±—ã—á–Ω–æ —Ö–æ—Ä–æ—à–µ–µ —Å–∂–∞—Ç–∏–µ
            estimated_bitrate = 2 * 1024 * 1024  # 2 –ú–±–∏—Ç/—Å
        elif file_ext in ['.avi', '.wmv']:
            # –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ —Å–∂–∞—Ç–∏–µ
            estimated_bitrate = 4 * 1024 * 1024  # 4 –ú–±–∏—Ç/—Å
        elif file_ext in ['.webm']:
            # WebM –æ–±—ã—á–Ω–æ —Ö–æ—Ä–æ—à–æ —Å–∂–∞—Ç
            estimated_bitrate = 1.5 * 1024 * 1024  # 1.5 –ú–±–∏—Ç/—Å
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            estimated_bitrate = 3 * 1024 * 1024  # 3 –ú–±–∏—Ç/—Å
        
        estimated_duration = max(10, int((file_size * 8) / estimated_bitrate))  # –ú–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
        
        print(f"[VIDEO_META] –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: {file_size/(1024*1024):.1f}–ú–ë -> ~{estimated_duration}—Å ({estimated_duration//60:.0f}:{estimated_duration%60:02.0f})")
        return {
            'duration': estimated_duration,
            'width': None,
            'height': None
        }
        
    except Exception as e:
        print(f"[VIDEO_META] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return {'duration': None, 'width': None, 'height': None}


class VideoUploader(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    progress_updated = pyqtSignal(int)
    status_updated = pyqtSignal(str)
    file_uploaded = pyqtSignal(str)
    file_progress = pyqtSignal(str, int, str)  # filename, percentage, speed
    finished = pyqtSignal(bool, str)
    
    def __init__(self, api_id, api_hash, chat_id, video_folder, delay_seconds=1, max_concurrent=4, prefix_text=""):
        super().__init__()
        self.api_id = api_id
        self.api_hash = api_hash
        self.chat_id = chat_id
        self.video_folder = video_folder
        self.delay_seconds = delay_seconds
        self.max_concurrent = max_concurrent  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á
        self.prefix_text = prefix_text  # –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤
        self.should_stop = False
        self.current_file = ""
        self.start_time = None
    
    def progress_callback(self, current, total):
        """Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
        if self.should_stop:
            return
            
        percentage = int((current / total) * 100) if total > 0 else 0
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if self.start_time:
            elapsed = time.time() - self.start_time
            if elapsed > 0:
                speed_bps = current / elapsed
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                if speed_bps < 100 * 1024:  # –ú–µ–Ω—å—à–µ 100 –ö–ë/—Å
                    print(f"[SPEED] –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_bps/1024:.1f} –ö–ë/—Å - –≤–æ–∑–º–æ–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ETA
                if speed_bps > 1024 * 1024:
                    speed_str = f"{speed_bps / (1024 * 1024):.1f} –ú–ë/—Å"
                elif speed_bps > 1024:
                    speed_str = f"{speed_bps / 1024:.1f} –ö–ë/—Å"
                else:
                    speed_str = f"{speed_bps:.0f} –ë/—Å"
                
                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                remaining_bytes = total - current
                eta_seconds = remaining_bytes / speed_bps if speed_bps > 0 else 0
                if eta_seconds < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
                    eta_str = f" | –û—Å—Ç–∞–ª–æ—Å—å: {eta_seconds/60:.1f}–º–∏–Ω"
                else:
                    eta_str = f" | –û—Å—Ç–∞–ª–æ—Å—å: {eta_seconds/3600:.1f}—á"
                
                speed_str += eta_str if eta_seconds > 10 else ""
            else:
                speed_str = "–í—ã—á–∏—Å–ª—è–µ—Ç—Å—è..."
        else:
            speed_str = "–ù–∞—á–∏–Ω–∞–µ–º..."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        self.file_progress.emit(self.current_file, percentage, speed_str)
    
    def stop_upload(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ"""
        self.should_stop = True
        print(f"[UPLOAD] –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: should_stop = {self.should_stop}")
        
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if hasattr(self, '_current_upload_task'):
            try:
                self._current_upload_task.cancel()
                print(f"[UPLOAD] –ó–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            except Exception as e:
                print(f"[UPLOAD] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É: {e}")
    
    def run(self):
        asyncio.set_event_loop(asyncio.new_event_loop())
        loop = asyncio.get_event_loop()
        try:
            loop.run_until_complete(self.upload_videos())
        except Exception as e:
            self.finished.emit(False, str(e))
        finally:
            loop.close()
    
    async def upload_videos(self):
        client = None
        try:
            print(f"[UPLOAD] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ")
            print(f"[UPLOAD] API ID: {self.api_id}, Chat ID: {self.chat_id}")
            print(f"[UPLOAD] –ü–∞–ø–∫–∞ —Å –≤–∏–¥–µ–æ: {self.video_folder}")
            print(f"[UPLOAD] üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏: {self.max_concurrent} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            client = Client(
                name="uploader_session",
                api_id=self.api_id,
                api_hash=self.api_hash,
                workdir=os.path.dirname(os.path.abspath(__file__)),
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                max_concurrent_transmissions=self.max_concurrent,  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞—á
                sleep_threshold=300,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è sleep
                workers=min(8, self.max_concurrent * 2)  # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
            )
            
            print(f"[UPLOAD] ‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏:")
            print(f"[UPLOAD]   - max_concurrent_transmissions: {self.max_concurrent}")
            print(f"[UPLOAD]   - workers: {min(8, self.max_concurrent * 2)}")
            print(f"[UPLOAD]   - sleep_threshold: 300")
            
            print(f"[UPLOAD] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
            await client.connect()
            print(f"[UPLOAD] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            try:
                # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É DC - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
                print(f"[UPLOAD] –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä...")
                dialogs = []
                async for dialog in client.get_dialogs(limit=1):
                    dialogs.append(dialog)
                    break  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
                
                print(f"[UPLOAD] –ü—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DC –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                if hasattr(client, 'session') and hasattr(client.session, 'dc_id'):
                    dc_id = client.session.dc_id
                    print(f"[UPLOAD] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ DC {dc_id}")
                    self.status_updated.emit(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä—É {dc_id}")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ 1: —á–µ—Ä–µ–∑ session
                    if hasattr(client.session, 'CHUNK_SIZE'):
                        original_chunk_size = client.session.CHUNK_SIZE
                        client.session.CHUNK_SIZE = 524288  # 512KB
                        print(f"[UPLOAD] –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω —Å {original_chunk_size} –¥–æ {client.session.CHUNK_SIZE}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ 2: —á–µ—Ä–µ–∑ storage
                    elif hasattr(client, 'storage') and hasattr(client.storage, 'CHUNK_SIZE'):
                        original_chunk_size = client.storage.CHUNK_SIZE
                        client.storage.CHUNK_SIZE = 524288  # 512KB
                        print(f"[UPLOAD] –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (storage) —É–≤–µ–ª–∏—á–µ–Ω —Å {original_chunk_size} –¥–æ {client.storage.CHUNK_SIZE}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ 3: –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è pyrogram
                    else:
                        import pyrogram
                        if hasattr(pyrogram, 'raw') and hasattr(pyrogram.raw, 'functions'):
                            print(f"[UPLOAD] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Pyrogram")
                        else:
                            print(f"[UPLOAD] –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                except Exception as chunk_error:
                    print(f"[UPLOAD] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞–Ω–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {chunk_error}")
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                print(f"[UPLOAD] ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏:")
                print(f"[UPLOAD]   - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏: {self.max_concurrent}")
                print(f"[UPLOAD]   - –í–æ—Ä–∫–µ—Ä—ã: {min(8, self.max_concurrent * 2)}")
                print(f"[UPLOAD]   - –†–µ–∂–∏–º: {'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è' if self.max_concurrent >= 8 else '–ë—ã—Å—Ç—Ä–∞—è' if self.max_concurrent >= 4 else '–û–±—ã—á–Ω–∞—è'} —Å–∫–æ—Ä–æ—Å—Ç—å")
                
            except Exception as opt_error:
                print(f"[UPLOAD] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {opt_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            me = await client.get_me()
            print(f"[UPLOAD] –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (ID: {me.id})")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–ª–∏–µ–Ω—Ç–µ
            # –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É 'NoneType' object has no attribute 'is_premium'
            client.me = me
            print(f"[UPLOAD] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–ª–∏–µ–Ω—Ç–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            is_premium = getattr(me, 'is_premium', False)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∂–∏–º–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
            if self.max_concurrent == 1:
                speed_mode = "–û–±—ã—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
            elif self.max_concurrent == 4:
                speed_mode = "–ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
            else:
                speed_mode = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
            
            if is_premium:
                print(f"[UPLOAD] ‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 4 –ì–ë")
                self.status_updated.emit(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} (–ü—Ä–µ–º–∏—É–º) | {speed_mode}")
            else:
                print(f"[UPLOAD] ‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç - –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ 2 –ì–ë")
                self.status_updated.emit(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} (–ª–∏–º–∏—Ç 2 –ì–ë) | {speed_mode}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–∏—Ä–æ–≤ (—Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É PEER_ID_INVALID)
            print(f"[UPLOAD] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–∏—Ä–æ–≤...")
            self.status_updated.emit("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
            dialogs_count = 0
            async for dialog in client.get_dialogs(limit=100):
                dialogs_count += 1
                if dialog.chat.id == int(self.chat_id):
                    print(f"[UPLOAD] –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç: {dialog.chat.title or dialog.chat.first_name} (ID: {dialog.chat.id})")
            
            print(f"[UPLOAD] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {dialogs_count} –¥–∏–∞–ª–æ–≥–æ–≤, –∫—ç—à –ø–∏—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
            video_extensions = ['.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.webm', '.m4v', '.3gp', '.ogv']
            video_files = []
            
            for file in os.listdir(self.video_folder):
                if any(file.lower().endswith(ext) for ext in video_extensions):
                    video_files.append(file)
            
            if not video_files:
                self.finished.emit(False, "–í –ø–∞–ø–∫–µ –Ω–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
                return
            
            video_files.sort()
            self.status_updated.emit(f"–ù–∞–π–¥–µ–Ω–æ {len(video_files)} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ)")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            successful = 0
            for i, video_file in enumerate(video_files):
                if self.should_stop:
                    break
                
                video_path = os.path.join(self.video_folder, video_file)
                file_name = os.path.splitext(video_file)[0]
                
                self.status_updated.emit(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: {video_file} ({i+1}/{len(video_files)})")
                
                try:
                    file_size = os.path.getsize(video_path)
                    size_mb = file_size / (1024 * 1024)
                    
                    print(f"[UPLOAD] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ: {video_file}, —Ä–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
                    print(f"[UPLOAD] Chat ID: {self.chat_id}, –ø—É—Ç—å: {video_path}")
                    print(f"[UPLOAD] client.me —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {client.me is not None}")
                    if client.me:
                        print(f"[UPLOAD] –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: {getattr(client.me, 'is_premium', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
                    self.status_updated.emit(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ: {video_file} ({size_mb:.1f} MB)")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É)
                    if i > 0:  # –ù–µ –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Ñ–∞–π–ª–æ–º
                        await asyncio.sleep(0.5)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    self.current_file = video_file
                    self.start_time = time.time()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    try:
                        print(f"[UPLOAD] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞ ID: {self.chat_id}")
                        peer = await client.resolve_peer(self.chat_id)
                        print(f"[UPLOAD] –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {peer}")
                    except Exception as peer_error:
                        print(f"[UPLOAD] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞: {peer_error}")
                        self.file_uploaded.emit(f"‚ùå {video_file}: –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ID: {self.chat_id})")
                        continue
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    file_name_clean = os.path.splitext(video_file)[0]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
                    if self.prefix_text.strip():
                        caption_text = f"{self.prefix_text.strip()} {file_name_clean}"
                    else:
                        caption_text = file_name_clean
                    
                    # –î–û–ë–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–µ–≤—å—é –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    self.status_updated.emit(f"–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {video_file}")
                    video_metadata = get_video_metadata(video_path)
                    
                    duration = video_metadata.get('duration')
                    width = video_metadata.get('width')
                    height = video_metadata.get('height')
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    if duration:
                        duration_str = f"{duration//60}:{duration%60:02d}" if duration >= 60 else f"{duration}—Å"
                        print(f"[UPLOAD] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={duration_str}")
                        if width and height:
                            print(f"[UPLOAD] –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –≤–∏–¥–µ–æ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                    send_video_params = {
                        'chat_id': self.chat_id,
                        'video': video_path,
                        'caption': caption_text[:1024],  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç caption –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤
                        'progress': self.progress_callback,
                        'supports_streaming': True  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–π–¥–µ–Ω—ã
                    if duration and duration > 0:
                        send_video_params['duration'] = duration
                    if width and height and width > 0 and height > 0:
                        send_video_params['width'] = width
                        send_video_params['height'] = height
                    
                    result = await client.send_video(**send_video_params)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if result and hasattr(result, 'id'):
                        print(f"[UPLOAD] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {video_file}, Message ID: {result.id}")
                        successful += 1
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                        result_msg = f"‚úÖ {video_file} ({size_mb:.1f} MB)"
                        if duration and duration > 0:
                            if duration >= 60:
                                duration_str = f"{duration//60}:{duration%60:02d}"
                            else:
                                duration_str = f"{duration}—Å"
                            result_msg += f" [{duration_str}]"
                        if width and height:
                            result_msg += f" {width}x{height}"
                        result_msg += " - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤–∏–¥–µ–æ"
                        
                        self.file_uploaded.emit(result_msg)
                    else:
                        print(f"[UPLOAD] –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {video_file}")
                        successful += 1
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                        result_msg = f"‚úÖ {video_file} ({size_mb:.1f} MB)"
                        if duration and duration > 0:
                            if duration >= 60:
                                duration_str = f"{duration//60}:{duration%60:02d}"
                            else:
                                duration_str = f"{duration}—Å"
                            result_msg += f" [{duration_str}]"
                        if width and height:
                            result_msg += f" {width}x{height}"
                        result_msg += " - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≤–∏–¥–µ–æ"
                        
                        self.file_uploaded.emit(result_msg)
                    
                    progress = int((i + 1) / len(video_files) * 100)
                    self.progress_updated.emit(progress)
                    
                    if i < len(video_files) - 1 and self.delay_seconds > 0:
                        self.status_updated.emit(f"–ü–∞—É–∑–∞ {self.delay_seconds} —Å–µ–∫...")
                        await asyncio.sleep(self.delay_seconds)
                        
                except Exception as e:
                    error_str = str(e)
                    print(f"[UPLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {video_file}: {error_str}")
                    print(f"[UPLOAD] Traceback: {traceback.format_exc()}")
                    
                    # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
                    if hasattr(e, '__class__'):
                        print(f"[UPLOAD] –¢–∏–ø –æ—à–∏–±–∫–∏: {e.__class__.__name__}")
                    
                    self.file_uploaded.emit(f"‚ùå {video_file}: {error_str}")
            
            result_msg = f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {successful} –∏–∑ {len(video_files)} —Ñ–∞–π–ª–æ–≤"
            self.finished.emit(successful > 0, result_msg)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
            print(f"[UPLOAD] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}")
            print(f"[UPLOAD] Traceback –æ–±—â–µ–π –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            self.finished.emit(False, error_msg)
        finally:
            print(f"[UPLOAD] –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
            if client:
                await client.disconnect()
                print(f"[UPLOAD] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.settings = Settings()
        self.phone_code_hash = None
        self.auth_thread = None
        self.upload_thread = None
        self.chat_loader_thread = None
        self.chats_list = []
        self.code_timer = None  # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        self.time_left = 0
        self.init_ui()
        self.load_settings()
        
    def init_ui(self):
        self.setWindowTitle("Telegram Video Uploader v3.1")
        self.setGeometry(100, 100, 1100, 600)  # –ï—â–µ –±–æ–ª—å—à–µ —É–≤–µ–ª–∏—á–∏–ª–∏ —à–∏—Ä–∏–Ω—É –∏ —É–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–º—É
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #f0f4ff, stop:1 #e8f0ff);
            }
            QWidget {
                font-family: "Segoe UI", Arial, sans-serif;
                font-size: 11px;
            }
            QGroupBox {
                font-weight: bold;
                font-size: 12px;
                border: 2px solid #d0d0d0;
                border-radius: 10px;
                margin-top: 10px;
                padding-top: 5px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f8f9fa);
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px 0 10px;
                color: #2c3e50;
                background: transparent;
            }
            QLineEdit {
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                padding: 8px 12px;
                background: white;
                font-size: 11px;
                selection-background-color: #2196F3;
            }
            QLineEdit:focus {
                border-color: #2196F3;
            }
            QLineEdit:disabled {
                background-color: #f5f5f5;
                color: #999;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #4CAF50, stop:1 #45a049);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 10px 16px;
                font-weight: bold;
                font-size: 11px;
                min-height: 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #5CBF60, stop:1 #4CAF50);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #45a049, stop:1 #3e8e41);
            }
            QPushButton:disabled {
                background: #cccccc;
                color: #666666;
            }
            QComboBox {
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                padding: 8px 12px;
                background: white;
                min-width: 100px;
            }
            QComboBox:focus {
                border-color: #2196F3;
            }
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 8px solid #666;
                margin-right: 5px;
            }
            QProgressBar {
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                text-align: center;
                background: white;
                height: 20px;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #4CAF50, stop:1 #2196F3);
                border-radius: 6px;
                margin: 2px;
            }
            QTextEdit {
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                background: white;
                padding: 8px;
                font-family: "Consolas", "Courier New", monospace;
                font-size: 10px;
            }
            QListWidget {
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                background: white;
                alternate-background-color: #f8f9fa;
                outline: none;
            }
            QListWidget::item {
                padding: 12px;
                border-bottom: 1px solid #f0f0f0;
                border-radius: 4px;
                margin: 2px;
            }
            QListWidget::item:selected {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #2196F3, stop:1 #1976D2);
                color: white;
                border-radius: 6px;
            }
            QListWidget::item:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e3f2fd, stop:1 #bbdefb);
                border-radius: 6px;
            }
            QSplitter::handle {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e0e0e0, stop:1 #d0d0d0);
                border-radius: 3px;
                margin: 2px;
            }
            QSplitter::handle:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #2196F3, stop:1 #1976D2);
            }
        """)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
        main_splitter = QSplitter(Qt.Horizontal)
        main_splitter.setChildrenCollapsible(False)
        main_splitter.setHandleWidth(8)
        central_widget_layout = QVBoxLayout(central_widget)
        central_widget_layout.setContentsMargins(8, 8, 8, 8)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã
        central_widget_layout.addWidget(main_splitter)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setSpacing(6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        left_layout.setContentsMargins(6, 6, 6, 6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã
        main_splitter.addWidget(left_widget)
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤—ã–±–æ—Ä —á–∞—Ç–æ–≤
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_layout.setSpacing(6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        right_layout.setContentsMargins(6, 6, 6, 6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø—ã
        main_splitter.addWidget(right_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (60% –ª–µ–≤–∞—è, 40% –ø—Ä–∞–≤–∞—è)
        main_splitter.setSizes([660, 440])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        title_widget = QWidget()
        title_widget.setStyleSheet("""
            QWidget {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                border-radius: 15px;
                margin: 0px 0px 10px 0px;
            }
        """)
        title_layout = QVBoxLayout(title_widget)
        title_layout.setContentsMargins(15, 6, 15, 6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        
        title = QLabel("üìπ Telegram Video Uploader")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Segoe UI", 14, QFont.Bold))  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        title.setStyleSheet("color: white; background: transparent; margin: 0px;")
        title_layout.addWidget(title)
        
        subtitle = QLabel("–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setFont(QFont("Segoe UI", 8))  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        subtitle.setStyleSheet("color: rgba(255, 255, 255, 0.9); background: transparent; margin: 0px;")
        title_layout.addWidget(subtitle)
        
        left_layout.addWidget(title_widget)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è API –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        api_auth_layout = QHBoxLayout()
        api_auth_layout.setSpacing(8)
        
        # –°–µ–∫—Ü–∏—è API —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        api_group = QGroupBox("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        api_group.setStyleSheet("""
            QGroupBox {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f8f9fa);
                border: 2px solid #e0e7ff;
                border-radius: 12px;
                margin-top: 12px;
                padding-top: 8px;
            }
            QGroupBox::title {
                color: #4338ca;
                font-weight: bold;
                font-size: 13px;
            }
        """)
        api_layout = QVBoxLayout(api_group)
        api_layout.setSpacing(6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        api_id_layout = QHBoxLayout()
        api_id_label = QLabel("API ID:")
        api_id_label.setStyleSheet("color: #374151; font-weight: 600; min-width: 70px;")
        api_id_layout.addWidget(api_id_label)
        self.api_id_input = QLineEdit()
        self.api_id_input.setPlaceholderText("–ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ my.telegram.org")
        api_id_layout.addWidget(self.api_id_input)
        api_layout.addLayout(api_id_layout)
        
        api_hash_layout = QHBoxLayout()
        api_hash_label = QLabel("API Hash:")
        api_hash_label.setStyleSheet("color: #374151; font-weight: 600; min-width: 70px;")
        api_hash_layout.addWidget(api_hash_label)
        self.api_hash_input = QLineEdit()
        self.api_hash_input.setPlaceholderText("–ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ my.telegram.org")
        api_hash_layout.addWidget(self.api_hash_input)
        api_layout.addLayout(api_hash_layout)
        
        api_auth_layout.addWidget(api_group)
        
        # –°–µ–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        auth_group = QGroupBox("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram")
        auth_group.setStyleSheet("""
            QGroupBox {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f8f9fa);
                border: 2px solid #dcfce7;
                border-radius: 12px;
                margin-top: 12px;
                padding-top: 8px;
            }
            QGroupBox::title {
                color: #16a34a;
                font-weight: bold;
                font-size: 13px;
            }
        """)
        auth_layout = QVBoxLayout(auth_group)
        auth_layout.setSpacing(6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_layout = QHBoxLayout()
        phone_label = QLabel("–¢–µ–ª–µ—Ñ–æ–Ω:")
        phone_label.setStyleSheet("color: #374151; font-weight: 600; min-width: 70px;")
        phone_layout.addWidget(phone_label)
        self.phone_input = QLineEdit()
        self.phone_input.setPlaceholderText("+7XXXXXXXXXX")
        phone_layout.addWidget(self.phone_input)
        auth_layout.addLayout(phone_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π
        auth_buttons_layout = QHBoxLayout()
        
        self.check_auth_button = QPushButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
        self.check_auth_button.clicked.connect(self.check_authorization)
        self.check_auth_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #a855f7, stop:1 #9333ea);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 8px 12px;
                font-weight: bold;
                font-size: 10px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #c084fc, stop:1 #a855f7);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #9333ea, stop:1 #7c3aed);
            }
        """)
        auth_buttons_layout.addWidget(self.check_auth_button)
        
        self.reset_auth_button = QPushButton("üîÑ –°–±—Ä–æ—Å")
        self.reset_auth_button.clicked.connect(self.reset_authorization)
        self.reset_auth_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ef4444, stop:1 #dc2626);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 8px 12px;
                font-weight: bold;
                font-size: 10px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f87171, stop:1 #ef4444);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #dc2626, stop:1 #b91c1c);
            }
        """)
        auth_buttons_layout.addWidget(self.reset_auth_button)
        
        auth_layout.addLayout(auth_buttons_layout)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –≤–≤–æ–¥ –∫–æ–¥–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        code_layout = QHBoxLayout()
        self.get_code_button = QPushButton("üì± –ö–æ–¥")
        self.get_code_button.clicked.connect(self.request_code)
        self.get_code_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3b82f6, stop:1 #2563eb);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 8px 12px;
                font-weight: bold;
                font-size: 10px;
                min-width: 50px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #60a5fa, stop:1 #3b82f6);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #2563eb, stop:1 #1d4ed8);
            }
            QPushButton:disabled {
                background: #d1d5db;
                color: #9ca3af;
            }
        """)
        self.get_code_button.setEnabled(False)
        code_layout.addWidget(self.get_code_button)
        
        self.code_input = QLineEdit()
        self.code_input.setPlaceholderText("–ö–æ–¥")
        self.code_input.setMaxLength(5)
        self.code_input.setEnabled(False)
        self.code_input.setMaximumWidth(60)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.code_input.returnPressed.connect(self.confirm_code)
        code_layout.addWidget(self.code_input)
        
        self.confirm_code_button = QPushButton("‚úÖ OK")
        self.confirm_code_button.clicked.connect(self.confirm_code)
        self.confirm_code_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #10b981, stop:1 #059669);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 8px 12px;
                font-weight: bold;
                font-size: 10px;
                min-width: 40px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #34d399, stop:1 #10b981);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #059669, stop:1 #047857);
            }
            QPushButton:disabled {
                background: #d1d5db;
                color: #9ca3af;
            }
        """)
        self.confirm_code_button.setEnabled(False)
        code_layout.addWidget(self.confirm_code_button)
        auth_layout.addLayout(code_layout)
        
        # –ü–∞—Ä–æ–ª—å 2FA
        password_layout = QHBoxLayout()
        password_label = QLabel("2FA:")
        password_label.setStyleSheet("color: #374151; font-weight: 600; min-width: 70px;")
        password_layout.addWidget(password_label)
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("–ü–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ 2FA)")
        password_layout.addWidget(self.password_input)
        auth_layout.addLayout(password_layout)
        
        api_auth_layout.addWidget(auth_group)
        
        left_layout.addLayout(api_auth_layout)
        
        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        self.auth_status_label = QLabel("üìã –°—Ç–∞—Ç—É—Å: –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        self.auth_status_label.setStyleSheet("""
            QLabel {
                color: #6b7280;
                font-weight: bold;
                padding: 8px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f9fafb, stop:1 #f3f4f6);
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                margin: 5px 0px;
            }
        """)
        left_layout.addWidget(self.auth_status_label)
        
        api_auth_layout.addWidget(auth_group)
        
        left_layout.addLayout(api_auth_layout)
        
        # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        upload_group = QGroupBox("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ")
        upload_group.setStyleSheet("""
            QGroupBox {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f8f9fa);
                border: 2px solid #fef3c7;
                border-radius: 12px;
                margin-top: 12px;
                padding-top: 8px;
            }
            QGroupBox::title {
                color: #d97706;
                font-weight: bold;
                font-size: 13px;
            }
        """)
        upload_layout = QVBoxLayout(upload_group)
        upload_layout.setSpacing(6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_layout = QHBoxLayout()
        self.folder_input = QLineEdit()
        self.folder_input.setReadOnly(True)
        self.folder_input.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ")
        folder_layout.addWidget(self.folder_input)
        
        self.browse_button = QPushButton("üìÅ –û–±–∑–æ—Ä")
        self.browse_button.clicked.connect(self.browse_folder)
        self.browse_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f59e0b, stop:1 #d97706);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 10px 16px;
                font-weight: bold;
                font-size: 11px;
                min-width: 100px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #fbbf24, stop:1 #f59e0b);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #d97706, stop:1 #b45309);
            }
        """)
        folder_layout.addWidget(self.browse_button)
        upload_layout.addLayout(folder_layout)
        
        # –ü–æ–ª–µ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Ç–µ–∫—Å—Ç–∞
        prefix_layout = QHBoxLayout()
        prefix_label = QLabel("üìù –ü—Ä–µ—Ñ–∏–∫—Å:")
        prefix_label.setStyleSheet("color: #374151; font-weight: 600; min-width: 80px;")
        prefix_layout.addWidget(prefix_label)
        self.prefix_input = QLineEdit()
        self.prefix_input.setPlaceholderText("–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        self.prefix_input.setToolTip("–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
        self.prefix_input.textChanged.connect(self.on_prefix_changed)
        prefix_layout.addWidget(self.prefix_input)
        upload_layout.addLayout(prefix_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        settings_layout = QHBoxLayout()
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞
        delay_layout = QVBoxLayout()
        delay_label = QLabel("‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):")
        delay_label.setStyleSheet("color: #374151; font-weight: 600;")
        delay_layout.addWidget(delay_label)
        self.delay_input = QLineEdit()
        self.delay_input.setText("2")
        self.delay_input.setMaximumWidth(80)
        delay_layout.addWidget(self.delay_input)
        settings_layout.addLayout(delay_layout)
        
        settings_layout.addStretch()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speed_layout = QVBoxLayout()
        speed_label = QLabel("üöÄ –°–∫–æ—Ä–æ—Å—Ç—å:")
        speed_label.setStyleSheet("color: #374151; font-weight: 600;")
        speed_layout.addWidget(speed_label)
        self.speed_combo = QComboBox()
        self.speed_combo.addItems([
            "–û–±—ã—á–Ω–∞—è (1 –ø–æ—Ç–æ–∫)",
            "–ë—ã—Å—Ç—Ä–∞—è (4 –ø–æ—Ç–æ–∫–∞)", 
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è (8 –ø–æ—Ç–æ–∫–æ–≤)"
        ])
        self.speed_combo.setCurrentIndex(1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã—Å—Ç—Ä–∞—è
        self.speed_combo.setToolTip("–î–ª—è —Ñ–∞–π–ª–æ–≤ –¥–æ 3 –ì–ë —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
        speed_layout.addWidget(self.speed_combo)
        settings_layout.addLayout(speed_layout)
        
        upload_layout.addLayout(settings_layout)
        
        # –ö—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        upload_buttons_layout = QHBoxLayout()
        upload_buttons_layout.setSpacing(8)
        
        self.start_button = QPushButton("üöÄ –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
        self.start_button.clicked.connect(self.start_upload)
        self.start_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #10b981, stop:1 #059669);
                color: white;
                border: none;
                border-radius: 10px;
                padding: 12px 16px;
                font-weight: bold;
                font-size: 12px;
                min-height: 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #34d399, stop:1 #10b981);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #059669, stop:1 #047857);
            }
            QPushButton:disabled {
                background: #d1d5db;
                color: #9ca3af;
            }
        """)
        self.start_button.setEnabled(False)
        upload_buttons_layout.addWidget(self.start_button)
        
        self.stop_button = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_button.clicked.connect(self.stop_upload)
        self.stop_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ef4444, stop:1 #dc2626);
                color: white;
                border: none;
                border-radius: 10px;
                padding: 12px 16px;
                font-weight: bold;
                font-size: 12px;
                min-height: 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f87171, stop:1 #ef4444);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #dc2626, stop:1 #b91c1c);
            }
            QPushButton:disabled {
                background: #d1d5db;
                color: #9ca3af;
            }
        """)
        self.stop_button.setEnabled(False)
        upload_buttons_layout.addWidget(self.stop_button)
        
        upload_layout.addLayout(upload_buttons_layout)
        
        # –°—Ç–∏–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #e5e7eb;
                border-radius: 8px;
                text-align: center;
                background: white;
                height: 18px;
                font-weight: bold;
                color: #374151;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #10b981, stop:0.5 #3b82f6, stop:1 #8b5cf6);
                border-radius: 6px;
                margin: 2px;
            }
        """)
        upload_layout.addWidget(self.progress_bar)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        file_progress_group = QGroupBox("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞")
        file_progress_group.setStyleSheet("""
            QGroupBox {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f8f9fa);
                border: 2px solid #e0f2fe;
                border-radius: 10px;
                margin-top: 10px;
                padding-top: 5px;
            }
            QGroupBox::title {
                color: #0891b2;
                font-weight: bold;
                font-size: 12px;
            }
        """)
        file_progress_layout = QVBoxLayout(file_progress_group)
        
        self.current_file_label = QLabel("üìÑ –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.current_file_label.setStyleSheet("""
            QLabel {
                font-weight: bold;
                color: #0891b2;
                padding: 8px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f0f9ff, stop:1 #e0f7fa);
                border-radius: 6px;
                border: 1px solid #cffafe;
            }
        """)
        file_progress_layout.addWidget(self.current_file_label)
        
        self.file_progress_bar = QProgressBar()
        self.file_progress_bar.setVisible(False)
        self.file_progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #e5e7eb;
                border-radius: 8px;
                text-align: center;
                background: white;
                height: 18px;
                font-weight: bold;
                color: #374151;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #06b6d4, stop:1 #0891b2);
                border-radius: 6px;
                margin: 2px;
            }
        """)
        file_progress_layout.addWidget(self.file_progress_bar)
        
        self.upload_speed_label = QLabel("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: -")
        self.upload_speed_label.setStyleSheet("""
            QLabel {
                color: #6b7280;
                font-size: 10px;
                font-weight: 600;
                padding: 4px 8px;
                background: #f9fafb;
                border-radius: 4px;
                border: 1px solid #e5e7eb;
            }
        """)
        file_progress_layout.addWidget(self.upload_speed_label)
        
        upload_layout.addWidget(file_progress_group)
        
        left_layout.addWidget(upload_group)
        
        # –°–µ–∫—Ü–∏—è –ª–æ–≥–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        log_group = QGroupBox("üìã –õ–æ–≥–∏ –∏ —Å—Ç–∞—Ç—É—Å")
        log_group.setStyleSheet("""
            QGroupBox {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f8f9fa);
                border: 2px solid #f3e8ff;
                border-radius: 12px;
                margin-top: 12px;
                padding-top: 8px;
            }
            QGroupBox::title {
                color: #7c3aed;
                font-weight: bold;
                font-size: 13px;
            }
        """)
        log_layout = QVBoxLayout(log_group)
        log_layout.setSpacing(6)
        
        self.status_label = QLabel("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.setStyleSheet("""
            QLabel {
                color: #059669;
                font-weight: bold;
                padding: 12px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ecfdf5, stop:1 #d1fae5);
                border: 1px solid #a7f3d0;
                border-radius: 8px;
                margin: 2px 0px;
            }
        """)
        log_layout.addWidget(self.status_label)
        
        self.log_output = QTextEdit()
        self.log_output.setMaximumHeight(80)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É –ª–æ–≥–æ–≤
        self.log_output.setReadOnly(True)
        self.log_output.setStyleSheet("""
            QTextEdit {
                border: 2px solid #e5e7eb;
                border-radius: 8px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #fafafa);
                padding: 10px;
                font-family: "Consolas", "Courier New", monospace;
                font-size: 10px;
                color: #374151;
            }
        """)
        log_layout.addWidget(self.log_output)
        
        left_layout.addWidget(log_group)
        
        # –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –í—ã–±–æ—Ä —á–∞—Ç–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
        chat_title_widget = QWidget()
        chat_title_widget.setStyleSheet("""
            QWidget {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #6366f1, stop:1 #4f46e5);
                border-radius: 12px;
                margin: 0px 0px 10px 0px;
            }
        """)
        chat_title_layout = QVBoxLayout(chat_title_widget)
        chat_title_layout.setContentsMargins(15, 6, 15, 6)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        
        chat_title = QLabel("üí¨ –ß–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã")
        chat_title.setAlignment(Qt.AlignCenter)
        chat_title.setFont(QFont("Segoe UI", 11, QFont.Bold))  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        chat_title.setStyleSheet("color: white; background: transparent; margin: 0px;")
        chat_title_layout.addWidget(chat_title)
        
        filter_info = QLabel("(–ò—Å–∫–ª—é—á–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –∏ –±–æ—Ç—ã)")
        filter_info.setAlignment(Qt.AlignCenter)
        filter_info.setStyleSheet("color: rgba(255, 255, 255, 0.8); background: transparent; font-size: 10px; margin: 0px;")
        chat_title_layout.addWidget(filter_info)
        
        right_layout.addWidget(chat_title_widget)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤
        self.load_chats_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        self.load_chats_button.clicked.connect(self.load_chats)
        self.load_chats_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #6366f1, stop:1 #4f46e5);
                color: white;
                border: none;
                border-radius: 10px;
                padding: 12px 16px;
                font-weight: bold;
                font-size: 12px;
                min-height: 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #818cf8, stop:1 #6366f1);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #4f46e5, stop:1 #3730a3);
            }
            QPushButton:disabled {
                background: #d1d5db;
                color: #9ca3af;
            }
        """)
        self.load_chats_button.setEnabled(False)
        right_layout.addWidget(self.load_chats_button)
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤
        self.chat_load_status = QLabel("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")
        self.chat_load_status.setStyleSheet("""
            QLabel {
                color: #6b7280;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f9fafb, stop:1 #f3f4f6);
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                padding: 12px;
                margin: 5px 0px;
                font-size: 11px;
            }
        """)
        self.chat_load_status.setAlignment(Qt.AlignCenter)
        right_layout.addWidget(self.chat_load_status)
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Ç–∞–º —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        search_layout = QHBoxLayout()
        search_icon = QLabel("üîç")
        search_icon.setStyleSheet("""
            QLabel {
                color: #6b7280;
                font-size: 14px;
                padding: 8px 0px;
                margin-right: 8px;
            }
        """)
        search_layout.addWidget(search_icon)
        
        self.chat_search_input = QLineEdit()
        self.chat_search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...")
        self.chat_search_input.textChanged.connect(self.filter_chats)
        self.chat_search_input.setStyleSheet("""
            QLineEdit {
                border: 2px solid #e5e7eb;
                border-radius: 10px;
                padding: 12px 16px;
                font-size: 12px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f9fafb);
                color: #374151;
            }
            QLineEdit:focus {
                border-color: #10b981;
                background: white;
            }
            QLineEdit:hover {
                border-color: #d1d5db;
            }
        """)
        search_layout.addWidget(self.chat_search_input)
        right_layout.addLayout(search_layout)
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º  
        self.chat_list_widget = QListWidget()
        self.chat_list_widget.setMaximumHeight(200)  # –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        self.chat_list_widget.setStyleSheet("""
            QListWidget {
                border: 2px solid #e5e7eb;
                border-radius: 12px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #fafafa);
                padding: 8px;
            }
            QListWidget::item {
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                padding: 12px;
                margin: 3px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f9fafb);
                font-size: 12px;
                color: #374151;
            }
            QListWidget::item:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ecfdf5, stop:1 #d1fae5);
                border-color: #10b981;
                color: #047857;
            }
            QListWidget::item:selected {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #10b981, stop:1 #059669);
                color: white;
                border-color: #047857;
                font-weight: bold;
            }
        """)
        self.chat_list_widget.itemClicked.connect(self.on_chat_selected)
        right_layout.addWidget(self.chat_list_widget)
        
        # –í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        selected_group = QGroupBox("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç")
        selected_group.setStyleSheet("""
            QGroupBox {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f0f9ff, stop:1 #e0f2fe);
                border: 2px solid #38bdf8;
                border-radius: 12px;
                margin-top: 12px;
                padding-top: 8px;
            }
            QGroupBox::title {
                color: #0284c7;
                font-weight: bold;
                font-size: 13px;
            }
        """)
        selected_layout = QVBoxLayout(selected_group)
        selected_layout.setSpacing(6)
        
        self.selected_chat_label = QLabel("üí¨ –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.selected_chat_label.setStyleSheet("""
            QLabel {
                color: #6b7280;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ffffff, stop:1 #f8fafc);
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 12px;
                font-size: 12px;
                font-weight: bold;
            }
        """)
        self.selected_chat_label.setWordWrap(True)
        selected_layout.addWidget(self.selected_chat_label)
        
        # –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è ID —á–∞—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.chat_input = QLineEdit()
        self.chat_input.setVisible(False)
        
        right_layout.addWidget(selected_group)
        right_layout.addStretch()
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.api_id_input.setText(str(self.settings.get("api_id", "")))
        self.api_hash_input.setText(self.settings.get("api_hash", ""))
        self.phone_input.setText(self.settings.get("phone", ""))
        self.folder_input.setText(self.settings.get("folder", ""))
        self.prefix_input.setText(self.settings.get("prefix_text", ""))  # –î–û–ë–ê–í–õ–ï–ù–û: –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑
        self.selected_chat_label.setText("–ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.selected_chat_label.setStyleSheet("color: #666; font-weight: bold; padding: 10px;")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if all([self.api_id_input.text(), self.api_hash_input.text(), self.phone_input.text()]):
            QTimer.singleShot(1000, self.check_authorization)
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            api_id = int(self.api_id_input.text()) if self.api_id_input.text() else 0
        except ValueError:
            api_id = 0
            
        self.settings.set("api_id", api_id)
        self.settings.set("api_hash", self.api_hash_input.text())
        self.settings.set("phone", self.phone_input.text())
        self.settings.set("folder", self.folder_input.text())
        self.settings.set("prefix_text", self.prefix_input.text())  # –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
        if hasattr(self, 'selected_chat_id') and self.selected_chat_id:
            self.settings.set("selected_chat_id", self.selected_chat_id)
            self.settings.set("selected_chat_name", getattr(self, 'selected_chat_name', ''))
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
        cursor = self.log_output.textCursor()
        cursor.movePosition(cursor.Start)
        cursor.insertText(log_entry + "\n")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –≤–∏–¥–Ω—ã
        cursor.movePosition(cursor.Start)
        self.log_output.setTextCursor(cursor)
        
        self.status_label.setText(message)
    
    def check_authorization(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.validate_api_settings():
            return
            
        self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        self.check_auth_button.setEnabled(False)
        self.check_auth_button.setText("–ü—Ä–æ–≤–µ—Ä—è–µ–º...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.auth_thread and self.auth_thread.isRunning():
            self.auth_thread.quit()
            self.auth_thread.wait()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.auth_thread = TelegramAuthChecker(
            int(self.api_id_input.text()),
            self.api_hash_input.text(),
            self.phone_input.text()
        )
        self.auth_thread.step_completed.connect(self.on_auth_step)
        self.auth_thread.error_occurred.connect(self.on_auth_error)
        self.auth_thread.finished.connect(self.on_auth_thread_finished)
        self.auth_thread.start()
    
    def request_code(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.validate_api_settings():
            return
            
        self.log_message("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        self.get_code_button.setEnabled(False)
        self.get_code_button.setText("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.auth_thread and self.auth_thread.isRunning():
            self.auth_thread.quit()
            self.auth_thread.wait()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_thread = TelegramAuth(
            int(self.api_id_input.text()),
            self.api_hash_input.text(),
            self.phone_input.text()
        )
        self.auth_thread.step_completed.connect(self.on_auth_step)
        self.auth_thread.error_occurred.connect(self.on_auth_error)
        self.auth_thread.finished.connect(self.on_auth_thread_finished)
        self.auth_thread.start()
    
    def confirm_code(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.code_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
            return
            
        if not self.auth_thread or not self.auth_thread.isRunning():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
            return
        
        self.log_message("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        self.confirm_code_button.setEnabled(False)
        self.confirm_code_button.setText("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å 2FA, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
        password_2fa = self.password_input.text().strip() if self.password_input.text() else None
        if password_2fa:
            self.auth_thread.set_password(password_2fa)
            self.log_message("–ü–∞—Ä–æ–ª—å 2FA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –ø–æ—Ç–æ–∫
        self.auth_thread.set_code(self.code_input.text())
    
    def reset_authorization(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        session_file = "uploader_session.session"
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        if self.auth_thread and self.auth_thread.isRunning():
            self.log_message("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            self.auth_thread.quit()
            self.auth_thread.wait(2000)  # –ñ–¥–µ–º –¥–æ 2 —Å–µ–∫—É–Ω–¥
        
        if self.upload_thread and self.upload_thread.isRunning():
            self.log_message("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
            self.upload_thread.stop_upload()
            self.upload_thread.wait(3000)  # –ñ–¥–µ–º –¥–æ 3 —Å–µ–∫—É–Ω–¥
        
        if self.chat_loader_thread and self.chat_loader_thread.isRunning():
            self.log_message("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–æ–≤...")
            self.chat_loader_thread.quit()
            self.chat_loader_thread.wait(2000)  # –ñ–¥–µ–º –¥–æ 2 —Å–µ–∫—É–Ω–¥
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        max_attempts = 5
        for attempt in range(max_attempts):
            try:
                if os.path.exists(session_file):
                    os.remove(session_file)
                    self.log_message("‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω")
                    break
            except PermissionError as e:
                if attempt < max_attempts - 1:
                    self.log_message(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: —Ñ–∞–π–ª –∑–∞–Ω—è—Ç, –∂–¥–µ–º...")
                    import time
                    time.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                else:
                    self.log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                    QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏:\n{session_file}\n\n"
                        f"–§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º.\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
                    break
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")
                break
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        self.phone_code_hash = None
        self.update_auth_ui("not_authorized")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        self.chat_list_widget.clear()
        self.selected_chat_label.setText("–ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.selected_chat_label.setStyleSheet("color: #666; font-weight: bold; padding: 10px;")
        self.chat_load_status.setText("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")
        
        self.log_message("üîÑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
        QMessageBox.information(self, "–°–±—Ä–æ—Å", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!\n\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
    
    def on_auth_step(self, step, status, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print(f"[UI] Auth step: {step}, status: {status}, data: {data}")
        
        if step == "code_sent":
            self.phone_code_hash = data
            self.log_message("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç!")
            self.update_auth_ui("code_sent")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ–¥–∞
            QTimer.singleShot(90000, lambda: self.log_message("‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞!"))
            QTimer.singleShot(110000, lambda: self.log_message("‚ö†Ô∏è –ö–æ–¥ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –±—ã—Å—Ç—Ä–µ–µ!"))
            
        elif step == "auth_success":
            self.log_message(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {data}")
            self.update_auth_ui("authorized", data)
            self.save_settings()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.log_message("üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
            QTimer.singleShot(1000, self.load_chats)  # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            
        elif step == "need_password":
            self.log_message("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            QMessageBox.information(self, "2FA", 
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' —Å–Ω–æ–≤–∞.")
            self.confirm_code_button.setEnabled(True)
            self.confirm_code_button.setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
            self.password_input.setFocus()  # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
            
        elif step == "already_authorized":
            self.log_message(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {data}")
            self.update_auth_ui("authorized", data)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –µ—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            self.log_message("üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
            QTimer.singleShot(1000, self.load_chats)  # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            
        elif step == "not_authorized":
            self.log_message("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            self.update_auth_ui("not_authorized")
    
    def on_auth_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        error_msg = str(error)
        
        if "PHONE_CODE_EXPIRED" in error_msg:
            self.log_message("‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫! –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.")
            QMessageBox.warning(self, "–ö–æ–¥ –∏—Å—Ç–µ–∫", 
                "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫!\n\n"
                "–ö–æ–¥—ã –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ 2 –º–∏–Ω—É—Ç—ã.\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞.")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
            self.phone_code_hash = None
            self.update_auth_ui("not_authorized")
        elif "PHONE_CODE_INVALID" in error_msg:
            self.log_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
            QMessageBox.warning(self, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥", 
                "–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞\n"
                "‚Ä¢ –ß—Ç–æ –∫–æ–¥ –Ω–µ –∏—Å—Ç–µ–∫\n"
                "‚Ä¢ –ß—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ
            self.confirm_code_button.setEnabled(True)
            self.confirm_code_button.setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
            self.code_input.clear()
            self.code_input.setFocus()
        elif "FLOOD_WAIT" in error_msg:
            import re
            wait_time = re.search(r'(\d+)', error_msg)
            if wait_time:
                seconds = int(wait_time.group(1))
                minutes = seconds // 60
                self.log_message(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes} –º–∏–Ω—É—Ç.")
                QMessageBox.warning(self, "Flood –ª–∏–º–∏—Ç", 
                    f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!\n\n"
                    f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
            else:
                self.log_message("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
                QMessageBox.warning(self, "Flood –ª–∏–º–∏—Ç", 
                    "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫!\n"
                    "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
            self.phone_code_hash = None
            self.update_auth_ui("not_authorized")
        else:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n{error}")
            self.phone_code_hash = None
            self.update_auth_ui("not_authorized")
        
        self.reset_auth_buttons()
    
    def on_auth_thread_finished(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("[UI] Auth thread finished")
        # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –º–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
        if self.auth_thread:
            self.auth_thread.deleteLater()
            self.auth_thread = None
    
    def update_auth_ui(self, state, user_info=""):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if state == "not_authorized":
            self.auth_status_label.setText("–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            self.auth_status_label.setStyleSheet("color: #f44336; font-weight: bold;")
            self.get_code_button.setEnabled(True)
            self.get_code_button.setText("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥")
            self.code_input.setEnabled(False)
            self.confirm_code_button.setEnabled(False)
            self.start_button.setEnabled(False)
            self.load_chats_button.setEnabled(False)
            self.chat_load_status.setText("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")
            
        elif state == "code_sent":
            self.auth_status_label.setText("–°—Ç–∞—Ç—É—Å: üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            self.auth_status_label.setStyleSheet("color: #FF9800; font-weight: bold;")
            self.get_code_button.setEnabled(False)
            self.get_code_button.setText("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úì")
            self.code_input.setEnabled(True)
            self.code_input.setFocus()
            self.confirm_code_button.setEnabled(True)
            
        elif state == "authorized":
            self.auth_status_label.setText(f"–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {user_info}")
            self.auth_status_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
            self.get_code_button.setEnabled(False)
            self.get_code_button.setText("–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            self.code_input.setEnabled(False)
            self.confirm_code_button.setEnabled(False)
            self.start_button.setEnabled(True)
            self.load_chats_button.setEnabled(True)
            self.chat_load_status.setText("–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤")
        
        self.reset_auth_buttons()
    
    def reset_auth_buttons(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.check_auth_button.setEnabled(True)
        self.check_auth_button.setText("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        
        if self.confirm_code_button.isEnabled():
            self.confirm_code_button.setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        
        if self.get_code_button.isEnabled():
            self.get_code_button.setText("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥")
    
    def validate_api_settings(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
        if not self.api_id_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ API ID!")
            return False
        if not self.api_hash_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ API Hash!")
            return False
        if not self.phone_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
            return False
        try:
            int(self.api_id_input.text())
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return False
        return True
    
    def browse_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –≤–∏–¥–µ–æ"""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ")
        if folder:
            self.folder_input.setText(folder)
            self.save_settings()
    
    def on_prefix_changed(self):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏"""
        self.save_settings()
    
    def load_chats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        if not self.validate_api_settings():
            return
            
        self.log_message("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
        self.load_chats_button.setEnabled(False)
        self.load_chats_button.setText("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º...")
        self.chat_load_status.setText("–ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.chat_loader_thread and self.chat_loader_thread.isRunning():
            self.chat_loader_thread.quit()
            self.chat_loader_thread.wait()
        
        self.chat_loader_thread = ChatLoader(
            int(self.api_id_input.text()),
            self.api_hash_input.text()
        )
        self.chat_loader_thread.chats_loaded.connect(self.on_chats_loaded)
        self.chat_loader_thread.error_occurred.connect(self.on_chat_load_error)
        self.chat_loader_thread.progress_updated.connect(self.on_chat_load_progress)
        self.chat_loader_thread.finished.connect(self.on_chat_load_finished)
        self.chat_loader_thread.start()
    
    def on_chats_loaded(self, chats):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        self.chats_list = chats
        self.update_chat_list()  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º update_chat_list –≤–º–µ—Å—Ç–æ populate_chat_list
        self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
        self.chat_load_status.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
    
    def on_chat_load_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤"""
        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {error}")
        self.chat_load_status.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã:\n\n{error}")
    
    def on_chat_load_progress(self, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤"""
        self.chat_load_status.setText(status)
    
    def on_chat_load_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤"""
        self.load_chats_button.setEnabled(True)
        self.load_chats_button.setText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        if self.chat_loader_thread:
            self.chat_loader_thread.deleteLater()
            self.chat_loader_thread = None
    
    def update_chat_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
        if not hasattr(self, 'chats_list'):
            return
            
        self.chat_list_widget.clear()
        search_text = self.chat_search_input.text().lower()
        
        for chat in self.chats_list:
            if search_text and search_text not in chat['name'].lower():
                continue
                
            item = QListWidgetItem(chat['name'])
            item.setData(Qt.UserRole, chat)
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –¥–ª—è —á–∞—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            if not chat['can_send']:
                item.setBackground(Qt.lightGray)
                
            self.chat_list_widget.addItem(item)
    
    def populate_chat_list(self, chats):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        self.chat_list_widget.clear()
        for chat in chats:
            item = QListWidgetItem(chat['name'])
            item.setData(Qt.UserRole, chat)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
            if not chat['can_send']:
                item.setBackground(Qt.lightGray)
                item.setToolTip("–í —ç—Ç–æ—Ç —á–∞—Ç –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            self.chat_list_widget.addItem(item)
    
    def filter_chats(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —á–∞—Ç—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º update_chat_list –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.update_chat_list()
    
    def on_chat_selected(self, item):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
        chat_data = item.data(Qt.UserRole)
        
        if not chat_data['can_send']:
            QMessageBox.warning(self, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", 
                "–í –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —á–∞—Ç.")
            return
        
        chat_id = chat_data['id']
        chat_name = chat_data['name']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
        self.selected_chat_id = chat_id
        self.selected_chat_name = chat_name
        self.chat_input.setText(str(chat_id))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"[CHAT_SELECT] –í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_name}")
        print(f"[CHAT_SELECT] ID —á–∞—Ç–∞: {chat_id} (—Ç–∏–ø: {type(chat_id)})")
        print(f"[CHAT_SELECT] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–ª–µ: {self.chat_input.text()}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.selected_chat_label.setText(f"‚úÖ {chat_name}")
        self.selected_chat_label.setStyleSheet("color: #4CAF50; font-weight: bold; padding: 10px;")
        
        self.log_message(f"üìã –í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_name} (ID: {chat_id})")
        self.save_settings()
    
    def on_file_progress(self, filename, percentage, speed):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.current_file_label.setText(f"–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {filename}")
        self.file_progress_bar.setValue(percentage)
        self.upload_speed_label.setText(f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed} | {percentage}%")
        
        if not self.file_progress_bar.isVisible():
            self.file_progress_bar.setVisible(True)
    
    def start_upload(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ"""
        if not self.folder_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ!")
            return
        if not self.chat_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!\n\n–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        
        try:
            delay = int(self.delay_input.text()) if self.delay_input.text() else 2
        except ValueError:
            delay = 2
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        speed_setting = self.speed_combo.currentIndex()
        if speed_setting == 0:  # –û–±—ã—á–Ω–∞—è
            max_concurrent = 1
        elif speed_setting == 1:  # –ë—ã—Å—Ç—Ä–∞—è
            max_concurrent = 4
        else:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
            max_concurrent = 8
        
        self.log_message(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ (—Ä–µ–∂–∏–º: {self.speed_combo.currentText()})...")
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ñ–∞–π–ª–∞
        self.file_progress_bar.setVisible(True)
        self.file_progress_bar.setValue(0)
        self.current_file_label.setText("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")
        self.upload_speed_label.setText("–°–∫–æ—Ä–æ—Å—Ç—å: -")
        
        self.upload_thread = VideoUploader(
            int(self.api_id_input.text()),
            self.api_hash_input.text(),
            self.chat_input.text(),
            self.folder_input.text(),
            delay,
            max_concurrent,  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.prefix_input.text()  # –î–û–ë–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ç–µ–∫—Å—Ç–∞
        )
        
        self.upload_thread.progress_updated.connect(self.progress_bar.setValue)
        self.upload_thread.status_updated.connect(self.log_message)
        self.upload_thread.file_uploaded.connect(self.log_message)
        self.upload_thread.file_progress.connect(self.on_file_progress)
        self.upload_thread.finished.connect(self.on_upload_finished)
        self.upload_thread.start()
    
    def stop_upload(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É"""
        if self.upload_thread and self.upload_thread.isRunning():
            self.log_message("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
            self.stop_button.setEnabled(False)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.stop_button.setText("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –ø–æ—Ç–æ–∫–µ
                self.upload_thread.stop_upload()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
                def check_thread_finished():
                    if not self.upload_thread.isRunning():
                        self.log_message("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                        self.reset_ui_after_stop()
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 100ms
                    QTimer.singleShot(100, check_thread_finished)
                
                # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                check_thread_finished()
                
                # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (10 —Å–µ–∫—É–Ω–¥)
                def force_stop():
                    if self.upload_thread and self.upload_thread.isRunning():
                        self.log_message("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞")
                        self.upload_thread.terminate()
                        self.upload_thread.wait(1000)  # –ñ–¥–µ–º –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã
                        self.reset_ui_after_stop()
                
                QTimer.singleShot(10000, force_stop)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
                self.reset_ui_after_stop()
        else:
            self.log_message("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
    
    def reset_ui_after_stop(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç UI –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.stop_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.progress_bar.setVisible(False)
        self.file_progress_bar.setVisible(False)
        self.current_file_label.setText("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.upload_speed_label.setText("–°–∫–æ—Ä–æ—Å—Ç—å: -")
        self.status_label.setText("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def on_upload_finished(self, success, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.progress_bar.setVisible(False)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ñ–∞–π–ª–∞
        self.file_progress_bar.setVisible(False)
        self.current_file_label.setText("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.upload_speed_label.setText("–°–∫–æ—Ä–æ—Å—Ç—å: -")
        
        if success:
            self.log_message(f"‚úÖ {message}")
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", message)
        else:
            self.log_message(f"‚ùå {message}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("[UI] Closing application...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        threads_stopped = True
        
        if self.auth_thread and self.auth_thread.isRunning():
            print("[UI] Stopping auth thread...")
            try:
                self.auth_thread.quit()
                if not self.auth_thread.wait(2000):  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
                    print("[UI] Force terminating auth thread...")
                    self.auth_thread.terminate()
                    self.auth_thread.wait(1000)
            except Exception as e:
                print(f"[UI] Error stopping auth thread: {e}")
                threads_stopped = False
            
        if self.upload_thread and self.upload_thread.isRunning():
            print("[UI] Stopping upload thread...")
            try:
                self.upload_thread.stop_upload()
                self.upload_thread.quit()
                if not self.upload_thread.wait(3000):  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                    print("[UI] Force terminating upload thread...")
                    self.upload_thread.terminate()
                    self.upload_thread.wait(1000)
            except Exception as e:
                print(f"[UI] Error stopping upload thread: {e}")
                threads_stopped = False
        
        if self.chat_loader_thread and self.chat_loader_thread.isRunning():
            print("[UI] Stopping chat loader thread...")
            try:
                self.chat_loader_thread.quit()
                if not self.chat_loader_thread.wait(2000):  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
                    print("[UI] Force terminating chat loader thread...")
                    self.chat_loader_thread.terminate()
                    self.chat_loader_thread.wait(1000)
            except Exception as e:
                print(f"[UI] Error stopping chat loader thread: {e}")
                threads_stopped = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            self.save_settings()
        except Exception as e:
            print(f"[UI] Error saving settings: {e}")
        
        if threads_stopped:
            print("[UI] All threads stopped successfully")
        else:
            print("[UI] Some threads may not have stopped properly")
        
        print("[UI] Application closed")
        event.accept()


def main():
    app = None
    try:
        app = QApplication(sys.argv)
        app.setStyle('Fusion')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        def exception_handler(exc_type, exc_value, exc_traceback):
            print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc_type.__name__}: {exc_value}")
            print(f"Traceback: {''.join(traceback.format_tb(exc_traceback))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setWindowTitle("–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                msg.setText(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n{exc_type.__name__}: {exc_value}\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.")
                msg.exec_()
            except:
                pass
        
        sys.excepthook = exception_handler
        
        window = MainWindow()
        window.show()
        
        sys.exit(app.exec_())
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if not app and not QApplication.instance():
                app = QApplication(sys.argv)
            
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowTitle("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
            msg.setText(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n\n{e}")
            msg.exec_()
        except:
            pass


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
